########################################################################################################################
# This property sets the name of your Spring Boot application, which is used for identification purposes.
# It's helpful for distinguishing your application within a distributed system or when interacting with other services.
# Naming your application appropriately can aid in monitoring, logging, and debugging.

spring.application.name=eureka-discovery-ms




########################################################################################################################
# This property in Spring Boot dynamically activates a specific profile based on the value of the PROFILE environment variable.
# Profiles in Spring allow the application to load environment-specific configurations, like different databases or settings for development, testing, or production.
# By setting this variable, the application automatically loads the appropriate configuration at runtime.
# In this case when running with profile 'eurekaservice1', application will start with application.properties and application-eurekaservice1.properties configuration.
# This enables the same codebase to be deployed across different environments without hardcoding values.

spring.profiles.active=${PROFILE}




########################################################################################################################
# Disable self-registration of the Eureka client.
# By setting this property to 'false', the application will not attempt to register itself with a Eureka server.
# This is typically used when the application itself is acting as a Eureka server or for testing purposes.
# However, in case of creating cluster of eureka services, the property should be true so that all the peer eureka services register itself to each other.

eureka.client.register-with-eureka=true




########################################################################################################################
# This property is used to specify external configuration sources. Multiple sources can be defined, separated by commas.
# optional: This keyword indicates that the configuration source is optional. If the specified source is not available or cannot be reached, the application will still start without throwing an error.
# configserver: This indicates that the configuration source is a Spring Cloud Config Server.

spring.config.import=optional:configserver:http://localhost:9000


# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.

spring.rabbitmq.password=guest







