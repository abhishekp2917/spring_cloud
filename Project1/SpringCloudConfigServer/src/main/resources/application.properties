########################################################################################################################
# This property specifies the port on which your Spring Boot application will listen for incoming HTTP requests.
# By default, Spring Boot applications use port 8080, but this property allows you to customize the port as needed.
# In this case, the application will be accessible at the port number which will be provided as an argument at the runtime

server.port=${PORT}



########################################################################################################################
# This property sets the name of your Spring Boot application, which is used for identification purposes.
# It's helpful for distinguishing your application within a distributed system or when interacting with other services.
# Naming your application appropriately can aid in monitoring, logging, and debugging.

spring.application.name=springcloud-config-server-ms



########################################################################################################################
# This property in a Spring Boot application specifies from where to fetch configuration settings.
# If value is 'native' then it indicates that the configuration settings should be sourced from the local file system or classpath instead of an external remote Git repositories.
# In case value is set to 'git', the configuration settings should be sourced from remote Git Repository.

spring.profiles.active=native



########################################################################################################################
# This specifies the locations where the Config Server will look for configuration files in case the profile of the Spring Cloud Config Server is native.
# The native profile allows the Config Server to read configuration properties directly from the local file system rather than from a remote repository like Git.

spring.cloud.config.server.native.search-locations=file:C:/SpringCloud/Project1/SpringCloudConfigServer/src/main/resources/configuration



########################################################################################################################
# This property specifies the URL of the Git repository where the configuration files for the Config Server are stored.
# The Config Server will fetch configuration files from this repository.

spring.cloud.config.server.git.uri=https://github.com/abhishekp2917/spring_cloud_config_server



########################################################################################################################
# This property sets the username required to access the specified Git repository.
# If the repository is private, the Config Server needs this username to authenticate and retrieve the configuration files.

spring.cloud.config.server.git.username=abhishekp2917



########################################################################################################################
# This property sets the personal access token (used as a password) required to access the Git repository.
# This token authenticates the user and allows the Config Server to clone or pull the repository's contents.

spring.cloud.config.server.git.password=password



########################################################################################################################
# This property tells the Config Server to clone the Git repository when the server starts up.
# This ensures that the server has the latest version of the configuration files from the repository.

spring.cloud.config.server.git.clone-on-start=true



########################################################################################################################
# This property specifies the default branch to use when accessing the Git repository.
# If no branch (label) is specified in the client request, the Config Server will use this branch to fetch the configuration files.

spring.cloud.config.server.git.default-label=master



########################################################################################################################
# The property is used in Spring Boot applications to expose the busrefresh endpoint, which is part of Spring Cloud Bus.
# This endpoint allows for manual triggering of configuration refreshes across multiple instances in a microservice architecture, propagating changes via a message broker like RabbitMQ or Kafka.
# Proper security measures should be implemented to protect this endpoint, especially in production environments.
# After a configuration update for any MS on this config server, to broadcast the change to all the microservices, one has to hit http://localhost:9000/actuator/busrefresh after the change

management.endpoints.web.exposure.include=busrefresh


# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.

spring.rabbitmq.password=guest



########################################################################################################################
encrypt.key=uytfvbiu54gvbjgfvbnjkjhgfdxc9876dcvhjnm






