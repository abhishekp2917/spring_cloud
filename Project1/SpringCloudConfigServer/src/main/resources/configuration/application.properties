########################################################################################################################
# Eureka Discovery Basic authentication username. This username will be required to be passed to access Eureka Dashboard

eureka.user.username={cipher}ae13d5b25a4dcb075b1c14e3ebf031b86f7a4cb1809a9cf3eb0aa66e4882a85a



########################################################################################################################
# Eureka Discovery Basic authentication password. This password will be required to be passed to access Eureka Dashboard

eureka.user.password={cipher}ae13d5b25a4dcb075b1c14e3ebf031b86f7a4cb1809a9cf3eb0aa66e4882a85a



########################################################################################################################
# Define the Eureka service URL where the Eureka server is running to register the client to it
# In this case, there are three Eureka Discovery running as a cluster and is assumed to be running on 'http://eureka-service-1:8085/eureka', 'http://eureka-service-2:8086/eureka', 'http://eureka-service-3:8087/eureka'
# This property configures the URL where your Spring Boot application can locate the Eureka server.
# Eureka is a service discovery server that allows services to register themselves and discover other services in the system.
# This enables your application to register itself with Eureka and discover other services registered with the same Eureka server.

eureka.client.serviceUrl.defaultZone=http://${eureka.user.username}:${eureka.user.password}@eureka-service-1:8085/eureka,http://${eureka.user.username}:${eureka.user.password}@eureka-service-2:8086/eureka,http://${eureka.user.username}:${eureka.user.password}@eureka-service-3:8087/eureka



########################################################################################################################
# This property configures Spring to throw a NoHandlerFoundException when no handler (i.e., no controller method) is found for the incoming request.
# By default, Spring Boot returns a 404 status code without throwing an exception.
# Setting this property to true changes this behavior to throw an exception instead, which can then be handled globally

spring.mvc.throw-exception-if-no-handler-found=true



########################################################################################################################
# This property disables the default resource handling provided by Spring Boot.
# By default, Spring Boot maps certain paths to serve static resources (e.g., from classpath:/static, classpath:/public, classpath:/resources, and classpath:/META-INF/resources).
# Disabling this ensures that all requests are passed through the Spring MVC dispatcher and handled by your custom error handling logic or other controllers, rather than being intercepted by the default resource handler.

spring.web.resources.add-mappings=false



# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.
# The provided password is encrypted and will be decrypted using encrypt key defined in config server application.properties file

spring.rabbitmq.password={cipher}b11d6d39a81bd5e93bf361e9654639eef31a567dfff79c4d4b5ebafc1026cacb



########################################################################################################################
# Specifies the JDBC driver class for MySQL

hibernate.connection.driver_class=com.mysql.jdbc.Driver



########################################################################################################################
# JDBC URL for connecting to MySQL database

hibernate.connection.url=jdbc:mysql://localhost:3306/springcloud



########################################################################################################################
# Username for database connection

hibernate.connection.username=root



########################################################################################################################
# Password for database connection

hibernate.connection.password=password@123



########################################################################################################################
# Specifies the SQL dialect for MySQL databases. This will specify hibernate to generate SQL query specific to MySQL

hibernate.dialect=org.hibernate.dialect.MySQLDialect



########################################################################################################################
# Specifies schema creation behavior.

hibernate.hbm2ddl.auto=update



########################################################################################################################
# Enables SQL query logging

hibernate.show_sql=true



########################################################################################################################
# Enables formatting for logged SQL query

hibernate.format_sql=true



########################################################################################################################
# Defines secret key to generate JWT Token
# The provided secret key is encrypted and will be decrypted using encrypt key defined in config server application.properties file

jwt.secretKey={cipher}3d914eb67c3ae0394afcae3d88d51cb57014316111dbb85f2f6231ee8859b8f5e4f6a7546afb07e9075b4b0bc9d23f132a33e22b7b4ccc96679623e0a71d24db



########################################################################################################################
# Defines Cookie name for JWT Token

jwt.cookie.name=JWT_Token



########################################################################################################################
# product service endpoints

url.product.get.getProductById=http://product-ms/product/%s