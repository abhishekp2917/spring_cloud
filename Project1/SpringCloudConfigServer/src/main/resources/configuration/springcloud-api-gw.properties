########################################################################################################################
# Configures the type of web application. In this case, it is set to 'reactive' which indicates that the application will use
# Spring WebFlux, enabling reactive programming and non-blocking I/O. This is particularly useful for handling large numbers
# of concurrent requests with minimal resource consumption.

spring.main.web-application-type=reactive



########################################################################################################################
# Enables the service discovery locator for Spring Cloud Gateway. When set to true, the gateway will automatically create routes based on services registered with a discovery service (like Eureka).
# This allows for dynamic routing without needing to manually configure each route.
# To use this property effectively, gateway must be annotated with @EnableDiscoveryClient to dynamically generate routes using Discovery services
# If microservice having application name 'user-ms' registers with Discovery services, a route to that service through API GW will be created
# For e.g. to access resource located at path <path> of service 'user-ms' through API GW, one can access it using this base URL - http://localhost:8010/USER-MS/<path>

spring.cloud.gateway.discovery.locator.enabled=true



########################################################################################################################
# Configures the service ID(server application name) to be converted to lower case. When set to true, the gateway will convert service IDs of discovered services to lower case before creating routes.
# This can help avoid case sensitivity issues in service names.
# For e.g. route http://localhost:8010/USER-MS/<path> will be changed to http://localhost:8010/user-ms/<path>

spring.cloud.gateway.discovery.locator.lower-case-service-id=true



########################################################################################################################
# Disable/Enable all management endpoints by default. This means no endpoint will be enabled/disabled.

management.endpoints.enabled-by-default=false



########################################################################################################################
# Disable/Enable the 'health' endpoint, which provides the health status of the application.

management.endpoints.health.enabled=false



########################################################################################################################
# Disable/Enable the 'info' endpoint, which provides build and environment information about the application.

management.endpoints.info.enabled=false



########################################################################################################################
# Disable/Enable the 'metrics' endpoint, which exposes various system and application metrics.

management.endpoints.metrics.enabled=false



########################################################################################################################
# Disable/Enable the 'env' endpoint, which exposes environment properties such as system properties or configuration properties.

management.endpoints.env.enabled=false



########################################################################################################################
# Disable/Enable the 'mappings' endpoint, which exposes a list of all request mappings in the application.

management.endpoints.mappings.enabled=false



########################################################################################################################
# Disable/Enable the 'beans' endpoint, which shows all Spring beans created in the application context.

management.endpoints.beans.enabled=false



########################################################################################################################
# Disable/Enable the 'caches' endpoint, which shows the caches used by the application.

management.endpoints.caches.enabled=true



########################################################################################################################
# This property specifies which endpoints will be exposed via web (HTTP).
# Even though some are disabled, if they are listed here, it will be accessible unless 'enabled-by-default' is false.

management.endpoints.web.exposure.include=health,info,metrics,env,mappings,beans,caches



########################################################################################################################
# Sets the base path for accessing the exposed management endpoints through HTTP.
# In this case, all exposed endpoints will be accessible under '/monitor' instead of '/actuator' (e.g., /monitor/health).

management.endpoints.web.base-path=/monitor


