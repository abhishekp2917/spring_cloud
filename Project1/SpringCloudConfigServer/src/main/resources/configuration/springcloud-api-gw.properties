########################################################################################################################
# Configures the type of web application. In this case, it is set to 'reactive' which indicates that the application will use
# Spring WebFlux, enabling reactive programming and non-blocking I/O. This is particularly useful for handling large numbers
# of concurrent requests with minimal resource consumption.

spring.main.web-application-type=reactive



########################################################################################################################
# Enables the service discovery locator for Spring Cloud Gateway. When set to true, the gateway will automatically create routes based on services registered with a discovery service (like Eureka).
# This allows for dynamic routing without needing to manually configure each route.
# To use this property effectively, gateway must be annotated with @EnableDiscoveryClient to dynamically generate routes using Discovery services
# If microservice having application name 'user-ms' registers with Discovery services, a route to that service through API GW will be created
# For e.g. to access resource located at path <path> of service 'user-ms' through API GW, one can access it using this base URL - http://localhost:8010/USER-MS/<path>

spring.cloud.gateway.discovery.locator.enabled=true



########################################################################################################################
# Configures the service ID(server application name) to be converted to lower case. When set to true, the gateway will convert service IDs of discovered services to lower case before creating routes.
# This can help avoid case sensitivity issues in service names.
# For e.g. route http://localhost:8010/USER-MS/<path> will be changed to http://localhost:8010/user-ms/<path>

spring.cloud.gateway.discovery.locator.lower-case-service-id=true
