########################################################################################################################
# This property specifies the port on which your Spring Boot application will listen for incoming HTTP requests.
# By default, Spring Boot applications use port 8080, but this property allows you to customize the port as needed.
# In this case, the application will be accessible at the port number which will be provided as an argument at the runtime

server.port=${PORT}



########################################################################################################################
# This property sets the name of your Spring Boot application, which is used for identification purposes.
# It's helpful for distinguishing your application within a distributed system or when interacting with other services.
# Naming your application appropriately can aid in monitoring, logging, and debugging.

spring.application.name=user-ms



########################################################################################################################
# Define the Eureka service URL where the Eureka server is running
# In this case, it's assumed to be running on 'http://localhost:8085/eureka'
# This property configures the URL where your Spring Boot application can locate the Eureka server.
# Eureka is a service discovery server that allows services to register themselves and discover other services in the system.
# This enables your application to register itself with Eureka and discover other services registered with the same Eureka server.

eureka.client.serviceUrl.defaultZone=http://localhost:8085/eureka



########################################################################################################################
# Define a unique identifier for each instance of the application that registers with the Eureka server.
# This unique ID helps the Eureka server keep track of different instances of the same application, especially when scaling horizontally.

eureka.instance.instance-id=${spring.application.name}:${spring.application.instance-id:${random.value}}



########################################################################################################################
# Specifies the SQL dialect for MySQL databases. This will specify hibernate to generate SQL query specific to MySQL

hibernate.dialect=org.hibernate.dialect.MySQLDialect



########################################################################################################################
# Specifies the JDBC driver class for MySQL

hibernate.connection.driver_class=com.mysql.jdbc.Driver



########################################################################################################################
# JDBC URL for connecting to MySQL database

hibernate.connection.url=jdbc:mysql://localhost:3306/springcloud



########################################################################################################################
# Username for database connection

hibernate.connection.username=root



########################################################################################################################
# Password for database connection

hibernate.connection.password=password@123



########################################################################################################################
# Specifies schema creation behavior.

hibernate.hbm2ddl.auto=update



########################################################################################################################
# Enables SQL query logging

hibernate.show_sql=true



########################################################################################################################
# Enables formatting for logged SQL query

hibernate.format_sql=true


########################################################################################################################
# Defines secret key to generate JWT Token

jwt.secretKey=kiuyt345iuytr987678jhguy8766789jhg6jhb



########################################################################################################################
# Defines Cookie name for JWT Token

jwt.cookie.name=JWT



########################################################################################################################
# Defines URL to handle login request

login.url=/user/login



########################################################################################################################
# This property configures Spring to throw a NoHandlerFoundException when no handler (i.e., no controller method) is found for the incoming request.
# By default, Spring Boot returns a 404 status code without throwing an exception.
# Setting this property to true changes this behavior to throw an exception instead, which can then be handled globally

spring.mvc.throw-exception-if-no-handler-found=true



########################################################################################################################
# This property disables the default resource handling provided by Spring Boot.
# By default, Spring Boot maps certain paths to serve static resources (e.g., from classpath:/static, classpath:/public, classpath:/resources, and classpath:/META-INF/resources).
# Disabling this ensures that all requests are passed through the Spring MVC dispatcher and handled by your custom error handling logic or other controllers, rather than being intercepted by the default resource handler.

spring.web.resources.add-mappings=false



########################################################################################################################
# This property is used to specify external configuration sources. Multiple sources can be defined, separated by commas.
# optional: This keyword indicates that the configuration source is optional. If the specified source is not available or cannot be reached, the application will still start without throwing an error.
# configserver: This indicates that the configuration source is a Spring Cloud Config Server.

spring.config.import=optional:configserver:http://localhost:9000


# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.

spring.rabbitmq.password=guest





