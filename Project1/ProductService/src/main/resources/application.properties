########################################################################################################################
# This property specifies the port on which your Spring Boot application will listen for incoming HTTP requests.
# By default, Spring Boot applications use port 8080, but this property allows you to customize the port as needed.
# In this case, the application will be accessible at the port number which will be provided as an argument at the runtime

server.port=${PORT}



########################################################################################################################
# This property sets the name of your Spring Boot application, which is used for identification purposes.
# It's helpful for distinguishing your application within a distributed system or when interacting with other services.
# Naming your application appropriately can aid in monitoring, logging, and debugging.

spring.application.name=product-ms



########################################################################################################################
# Define a unique identifier for each instance of the application that registers with the Eureka server.
# This unique ID helps the Eureka server keep track of different instances of the same application, especially when scaling horizontally.

eureka.instance.instance-id=${spring.application.name}:${spring.application.instance-id:${random.value}}



########################################################################################################################
# This property is used to specify external configuration sources. Multiple sources can be defined, separated by commas.
# optional: This keyword indicates that the configuration source is optional. If the specified source is not available or cannot be reached, the application will still start without throwing an error.
# configserver: This indicates that the configuration source is a Spring Cloud Config Server.

spring.config.import=optional:configserver:http://localhost:9000


# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.

spring.rabbitmq.password=guest





