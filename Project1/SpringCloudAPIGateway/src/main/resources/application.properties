########################################################################################################################
# This property specifies the port on which your Spring Boot application will listen for incoming HTTP requests.
# By default, Spring Boot applications use port 8080, but this property allows you to customize the port as needed.
# In this case, the application will be accessible at the port number which will be provided as an argument at the runtime

server.port=${PORT}



########################################################################################################################
# This property sets the name of your Spring Boot application, which is used for identification purposes.
# It's helpful for distinguishing your application within a distributed system or when interacting with other services.
# Naming your application appropriately can aid in monitoring, logging, and debugging.

spring.application.name=springcloud-api-gw



########################################################################################################################
# Define the Eureka service URL where the Eureka server is running
# In this case, it's assumed to be running on 'http://localhost:8085/eureka'
# This property configures the URL where your Spring Boot application can locate the Eureka server.
# Eureka is a service discovery server that allows services to register themselves and discover other services in the system.
# This enables your application to register itself with Eureka and discover other services registered with the same Eureka server.

eureka.client.serviceUrl.defaultZone=http://localhost:8085/eureka



########################################################################################################################
# Configures the type of web application. In this case, it is set to 'reactive' which indicates that the application will use
# Spring WebFlux, enabling reactive programming and non-blocking I/O. This is particularly useful for handling large numbers
# of concurrent requests with minimal resource consumption.

spring.main.web-application-type=reactive



########################################################################################################################
# Enables the service discovery locator for Spring Cloud Gateway. When set to true, the gateway will automatically create routes based on services registered with a discovery service (like Eureka).
# This allows for dynamic routing without needing to manually configure each route.
# To use this property effectively, gateway must be annotated with @EnableDiscoveryClient to dynamically generate routes using Discovery services
# If microservice having application name 'user-ms' registers with Discovery services, a route to that service through API GW will be created
# For e.g. to access resource located at path <path> of service 'user-ms' through API GW, one can access it using this base URL - http://localhost:8010/USER-MS/<path>

spring.cloud.gateway.discovery.locator.enabled=true



########################################################################################################################
# Configures the service ID(server application name) to be converted to lower case. When set to true, the gateway will convert service IDs of discovered services to lower case before creating routes.
# This can help avoid case sensitivity issues in service names.
# For e.g. route http://localhost:8010/USER-MS/<path> will be changed to http://localhost:8010/user-ms/<path>

spring.cloud.gateway.discovery.locator.lower-case-service-id=true



########################################################################################################################
# This property is used to specify external configuration sources. Multiple sources can be defined, separated by commas.
# optional: This keyword indicates that the configuration source is optional. If the specified source is not available or cannot be reached, the application will still start without throwing an error.
# configserver: This indicates that the configuration source is a Spring Cloud Config Server.

spring.config.import=optional:configserver:http://localhost:9000



# When configuring Spring Cloud Bus with RabbitMQ as the underlying message broker, the properties you provided are essential for establishing the connection.
# Spring Cloud Bus uses the message broker to broadcast configuration changes and other events across distributed microservices.


########################################################################################################################
# This property tells the application where to find the RabbitMQ broker to send and receive messages that carry configuration changes or other event notifications.

spring.rabbitmq.host=localhost



########################################################################################################################
# Defines the port on which the RabbitMQ server is listening for connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Sets the username for authenticating with the RabbitMQ server.

spring.rabbitmq.username=guest



########################################################################################################################
# Specifies the password for the RabbitMQ user.

spring.rabbitmq.password=guest




